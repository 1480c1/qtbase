@QT_MODULE_PLUGIN_INCLUDES@

if(NOT @BUILD_SHARED_LIBS@)
    set(_module_target "@INSTALL_CMAKE_NAMESPACE@::@QT_MODULE@")
    # Properties can't be set on aliased targets, so make sure to unalias the target. This is needed
    # when Qt examples are built as part of the Qt build itself.
    get_target_property(_aliased_target ${_module_target} ALIASED_TARGET)
    if(_aliased_target)
        set(_module_target ${_aliased_target})
    endif()
    unset(_aliased_target)

    set(_default_plugins_are_enabled "$<GENEX_EVAL:$<TARGET_PROPERTY:QT_DEFAULT_PLUGINS>>")
    # Make sure to boolify the result of the expression, in case if the returned property value
    # is empty.
    set(_default_plugins_are_enabled_wrapped "$<BOOL:${_default_plugins_are_enabled}>")
    set(_manual_plugins_genex "$<GENEX_EVAL:$<TARGET_PROPERTY:QT_PLUGINS>>")
    set(_no_plugins_genex "$<GENEX_EVAL:$<TARGET_PROPERTY:QT_NO_PLUGINS>>")

    foreach(target @qt_plugins@)
        set(_plugin_target "@INSTALL_CMAKE_NAMESPACE@::${target}")
        get_target_property(_classname "${_plugin_target}" QT_PLUGIN_CLASS_NAME)
        if(NOT _classname)
          message("Warning: plugin ${_plugin_target} has no class name, skipping.")
          continue()
        endif()

        set(_plugin_is_default "$<TARGET_PROPERTY:${_plugin_target},QT_DEFAULT_PLUGIN>")
        set(_plugin_is_not_blacklisted "$<NOT:$<IN_LIST:${_plugin_target},${_no_plugins_genex}>>")
        set(_plugin_is_whitelisted "$<IN_LIST:${_plugin_target},${_manual_plugins_genex}>")

        string(CONCAT _plugin_condition
                    "$<BOOL:$<OR:"
                        "${_plugin_is_whitelisted},"
                        "$<AND:"
                            "${_default_plugins_are_enabled_wrapped},"
                            "${_plugin_is_default},"
                            "${_plugin_is_not_blacklisted}"
                        ">"
                    ">>"
        )
        set(_plugin_genex "$<${_plugin_condition}:${_plugin_target}>")
        target_link_libraries(${_module_target} INTERFACE "${_plugin_genex}")
        file(GENERATE
            OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/qt_@QT_MODULE@_${target}.cpp"
            CONTENT "#include <QtPlugin>\nQ_IMPORT_PLUGIN(${_classname})"
        )
        target_sources(${_module_target} INTERFACE "$<${_plugin_condition}:${CMAKE_CURRENT_BINARY_DIR}/qt_@QT_MODULE@_${target}.cpp>")
    endforeach()
endif()
