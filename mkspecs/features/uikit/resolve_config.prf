
xcodebuild {
    # Xcode project files always support both Debug and Release configurations
    # and iOS device and simulator targets, so we make sure the wrapper-makefile
    # also does.
    CONFIG += debug_and_release simulator_and_device
}

load(resolve_config)

# Legacy exclusive build configurations for backwards compatibility
CONFIG($${device.CONFIG}, $${device.CONFIG}|$${simulator.CONFIG}): \
    CONFIG += device
else: CONFIG($${simulator.CONFIG}, $${device.CONFIG}|$${simulator.CONFIG}): \
    CONFIG += simulator

CONFIG(simulator, simulator|device): \
    CONFIG -= device $${device.CONFIG}
else: \
    CONFIG -= simulator $${simulator.CONFIG}

macx-xcode {
    # There is no way to genereate Xcode projects that are limited to either
    # simulator or device builds, so simulator_and_device is always
    # effectivly active, even if the user disabled it explicitly.
    # The Xcode generator doesn't support multiple BUILDS though (exclusive
    # builds), so we have to manually set up the simulator suffix.
    library_suffix_simulator.name = "$${QMAKE_XCODE_LIBRARY_SUFFIX_SETTING}[sdk=$${simulator.sdk}*]"
    library_suffix_simulator.value = "_$${simulator.sdk}$($${QMAKE_XCODE_LIBRARY_SUFFIX_SETTING})"
    QMAKE_MAC_XCODE_SETTINGS += library_suffix_simulator
    CONFIG *= xcode_dynamic_library_suffix
} else {
    addExclusiveBuilds(simulator, device)
}
